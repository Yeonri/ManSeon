
# 파이프라인 스테이지
stages:
  - build
  - push
  - cleanup
  - deploy
#################
# 1-1. build_FE #
#################
build_FE:
  stage: build
  variables:
    DOCKERFILE_PATH: deploy/Dockerfile.fe
    CONTEXT: FE
  script:
    - docker build --no-cache -t build-fe -f $DOCKERFILE_PATH $CONTEXT
  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_BRANCH == "FE/dev" || $CI_COMMIT_BRANCH == "FE/rel")
    when: always
  - when: never

#################
# 1-2. build_BE #
#################

build_BE:
  stage: build
  variables:
    IMAGE_NAME_DEV: "$IMAGE_BE_DEV"
    IMAGE_NAME_REL: "$IMAGE_BE_REL"
    DOCKERFILE_PATH: deploy/Dockerfile.be
    CONTEXT: BE

  script:
    # 컨테이너 내림

    # BE/dev
    - |
      if [ "$CI_COMMIT_REF_NAME" == "BE/dev" ]; then
        docker compose -f /home/ubuntu/docker-compose.yml down
        docker image prune -f
        docker build --no-cache -t $IMAGE_NAME_DEV:$CI_COMMIT_SHA -f $DOCKERFILE_PATH $CONTEXT
        docker tag $IMAGE_NAME_DEV:$CI_COMMIT_SHA $IMAGE_NAME_DEV:latest
      fi

    # BE/rel
    - |
      if [ "$CI_COMMIT_REF_NAME" == "BE/rel" ]; then
        docker build --no-cache -t $IMAGE_NAME_REL:$CI_COMMIT_SHA -f $DOCKERFILE_PATH $CONTEXT
        docker tag $IMAGE_NAME_REL:$CI_COMMIT_SHA $IMAGE_NAME_REL:latest
      fi


  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_BRANCH == "BE/dev" || $CI_COMMIT_BRANCH == "BE/rel")
    when: always
  - when: never

#################
# 2-1. push_FE  #
#################
push_FE:
  stage: push
  script:
    # FE/dev
    - |
      if [ "$CI_COMMIT_BRANCH" == "FE/dev" ]; then
        docker run --rm -v /home/ubuntu/nginx:/output build-fe \
          sh -c "cp /app/android/app/build/outputs/apk/release/app-release.apk /output/"
      fi
    # FE/rel
    - |
      if [ "$CI_COMMIT_BRANCH" == "FE/rel" ]; then
        docker run --rm -v /home/gitlab-runner/nginx:/output build-fe \
        sh -c "cp /app/android/app/build/outputs/apk/release/app-release.apk /output/" \
      scp -i /home/gitlab-runner/J12B210T.pem /home/gitlab-runner/nginx/app-release.apk ubuntu@j12b210.p.ssafy.io /home/nginx/
      fi

  dependencies:
    - build_FE
  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_BRANCH == "FE/dev" || $CI_COMMIT_BRANCH == "FE/rel")
    when: always
  - when: never

#################
# 2-2. push_BE  #
#################

push_BE:
  stage: push
  variables:
    IMAGE_NAME_DEV: "$IMAGE_BE_DEV"
    IMAGE_NAME_REL: "$IMAGE_BE_REL"
    DOCKERHUB_ID_DEV: "$DOCKERHUB_USERNAME_DEV"
    DOCKERHUB_PW_DEV: "$DOCKERHUB_PASSWORD_DEV"
    DOCKERHUB_ID_REL: "$DOCKERHUB_USERNAME_REL"
    DOCKERHUB_PW_REL: "$DOCKERHUB_PASSWORD_REL"
  script:

    # BE/dev
    - |
      if [ "$CI_COMMIT_REF_NAME" == "BE/dev" ]; then
        echo $DOCKERHUB_PW_DEV | docker login -u $DOCKERHUB_ID_DEV --password-stdin
        docker push $IMAGE_NAME_DEV:$CI_COMMIT_SHA
        docker push $IMAGE_NAME_DEV:latest
      fi

    # BE/rel
    - |
      if [ "$CI_COMMIT_REF_NAME" == "BE/rel" ]; then
        echo $DOCKERHUB_PW_REL | docker login -u $DOCKERHUB_ID_REL --password-stdin
        docker push $IMAGE_NAME_REL:$CI_COMMIT_SHA
        docker push $IMAGE_NAME_REL:latest
      fi

  dependencies:
    - build_BE
  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_BRANCH == "BE/dev" || $CI_COMMIT_BRANCH == "BE/rel")
    when: always
  - when: never


#######################
# 3. cleanup JOB 단계  #
#######################

cleanup:
  stage: cleanup
  script:
    # 정리 (캐시고 뭐고... 지금 안 쓸랭 나중에... 하자...)
    - docker image prune -f
    - docker builder prune -f
  dependencies:
    - build_BE
    - build_FE
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_BRANCH == "BE/dev" || $CI_COMMIT_BRANCH == "BE/rel")
      when: always
    - when: never


##################
# 4. deploy 단계   #
##################

deploy_BE_dev:
  stage: deploy
  variables:
    IMAGE_NAME_DEV: "$IMAGE_BE_DEV"
  script:
    #  디렉토리 이동
    - cd /home/ubuntu/
    # 컨테이너 on .env 참조 (개발 단계에서는 .env X )
    - docker run $IMAGE_NAME_DEV:latest -d

  dependencies:
    - push_BE
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "BE/dev"
      when: always
    - when: never

deploy_BE_rel:
  stage: deploy
  variables:
    IMAGE_NAME_REL: "$IMAGE_BE_REL"
    MAIN_SERVER_URI: "ubuntu@j12b210.p.ssafy.io"
    PEM_KEY: "/home/gitlab-runner/J12B210T.pem"
  script:
    # SSH를 통해 B210-main-server에서 명령어 실행(터미널 생성)
    - |
      ssh -tt -i $PEM_KEY $MAIN_SERVER_URI << 'EOF'

        # docker 컨테이너 내리고 지움
        docker ps -aq --filter "ancestor=$IMAGE_NAME_REL:latest" | xargs -r docker rm -f
        # 새로운 이미지 허브에서 부르기
        docker pull $IMAGE_NAME_REL:latest
        docker run -d --name app --network cluster_net -p 8081:8080 $IMAGE_NAME_REL:latest
        # 나가기
        exit
      EOF

  dependencies:
    - push_BE
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "BE/rel"
      when: always
    - when: never



