
# 파이프라인 스테이지
stages:
  - build
  - push
  - cleanup
  - deploy

######################
# 1-1. build_BE_test #
######################

build_BE:
  stage: build
  variables:
    IMAGE_NAME_DEV: "$IMAGE_BE_DEV"
    IMAGE_NAME_REL: "$IMAGE_BE_REL"
    DOCKERFILE_PATH: deploy/Dockerfile.be
    CONTEXT: BE

  script:
    # 컨테이너 내림

    # BE/dev
    - |
      if [ "$CI_COMMIT_REF_NAME" == "BE/dev" ]; then
        docker compose -f /home/ubuntu/docker-compose.yml down
        docker image prune -f
        docker build --no-cache -t $IMAGE_NAME_DEV:$CI_COMMIT_SHA -f $DOCKERFILE_PATH $CONTEXT
        docker tag $IMAGE_NAME_DEV:$CI_COMMIT_SHA $IMAGE_NAME_DEV:latest
      fi

    # BE/rel
    - |
      if [ "$CI_COMMIT_REF_NAME" == "BE/rel" ]; then
        docker build --no-cache -t $IMAGE_NAME_REL:$CI_COMMIT_SHA -f $DOCKERFILE_PATH $CONTEXT
        docker tag $IMAGE_NAME_REL:$CI_COMMIT_SHA $IMAGE_NAME_REL:latest
      fi


  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_BRANCH == "BE/dev" || $CI_COMMIT_BRANCH == "BE/rel")
    when: always
  - when: never


#######################
# 2-2. push_BE_test   #
#######################

push_BE:
  stage: push
  variables:
    IMAGE_NAME_DEV: "$IMAGE_BE_DEV"
    IMAGE_NAME_REL: "$IMAGE_BE_REL"
    DOCKERHUB_ID_DEV: "$DOCKERHUB_USERNAME_DEV"
    DOCKERHUB_PW_DEV: "$DOCKERHUB_PASSWORD_DEV"
    DOCKERHUB_ID_REL: "$DOCKERHUB_USERNAME_REL"
    DOCKERHUB_PW_REL: "$DOCKERHUB_PASSWORD_REL"
  script:

    # BE/dev
    - |
      if [ "$CI_COMMIT_REF_NAME" == "BE/dev" ]; then
        echo $DOCKERHUB_PW_DEV | docker login -u $DOCKERHUB_ID_DEV --password-stdin
        docker push $IMAGE_NAME_DEV:$CI_COMMIT_SHA
        docker push $IMAGE_NAME_DEV:latest
      fi

    # BE/rel
    - |
      if [ "$CI_COMMIT_REF_NAME" == "BE/rel" ]; then
        echo $DOCKERHUB_PW_REL | docker login -u $DOCKERHUB_ID_REL --password-stdin
        docker push $IMAGE_NAME_REL:$CI_COMMIT_SHA
        docker push $IMAGE_NAME_REL:latest
      fi

  dependencies:
    - build_BE
  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_BRANCH == "BE/dev" || $CI_COMMIT_BRANCH == "BE/rel")
    when: always
  - when: never


#######################
# 3. cleanup JOB 단계  #
#######################

cleanup:
  stage: cleanup
  script:

    # 정리 (캐시고 뭐고... 지금 안 쓸랭 나중에... 하자...)
    - docker image prune -f
    - docker builder prune -f
  dependencies:
    - build_BE
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_REF_NAME == "BE/dev" || $CI_COMMIT_REF_NAME == "BE/rel")
      when: always
    - when: never


##################
# 4. deploy 단계   #
##################

## deploy_dev은 나중에 작성할게...  하둡이 더 급해


#test 서버는 따로 환경변수 처리 X
deploy_test:
  stage: deploy
  script:
    
    #  디렉토리 이동
    - cd /home/ubuntu/

    # 컨테이너 on .env 참조
    - docker compose up -d

    - echo "===================================="
    - echo "          배포 완료!!!"
    - echo "===================================="

  dependencies:
    - push_BE
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "BE/dev"
      when: always
    - when: never



