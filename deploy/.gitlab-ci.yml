
# 파이프라인 스테이지
stages:
  - build
  - push
  - cleanup
  - deploy

#################
# 1-2. build_BE #
#################

build_BE:
  stage: build
  variables:
    IMAGE_NAME_DEV: "$IMAGE_BE_DEV"
    IMAGE_NAME_REL: "$IMAGE_BE_REL"
    DOCKERFILE_PATH: deploy/Dockerfile.be
    CONTEXT: BE

  script:
    # 컨테이너 내림

    # BE/dev
    - |
      if [ "$CI_COMMIT_REF_NAME" == "BE/dev" ]; then
        docker compose -f /home/ubuntu/docker-compose.yml down
        docker system prune -af --volumes
        docker build -t $IMAGE_NAME_DEV:$CI_COMMIT_SHA -f $DOCKERFILE_PATH $CONTEXT
        docker tag $IMAGE_NAME_DEV:$CI_COMMIT_SHA $IMAGE_NAME_DEV:latest
      fi

    # BE/rel
    - |
      if [ "$CI_COMMIT_REF_NAME" == "BE/rel" ]; then
        docker build --no-cache -t $IMAGE_NAME_REL:$CI_COMMIT_SHA -f $DOCKERFILE_PATH $CONTEXT
        docker tag $IMAGE_NAME_REL:$CI_COMMIT_SHA $IMAGE_NAME_REL:latest
      fi

  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_BRANCH == "BE/dev" || $CI_COMMIT_BRANCH == "BE/rel")
    when: always
  - when: never


#################
# 2-2. push_BE  #
#################

push_BE:
  stage: push
  variables:
    IMAGE_NAME_DEV: "$IMAGE_BE_DEV"
    IMAGE_NAME_REL: "$IMAGE_BE_REL"
    DOCKERHUB_ID: "$DOCKERHUB_USERNAME"
    DOCKERHUB_PW: "$DOCKERHUB_PASSWORD"
  script:

    - echo $DOCKERHUB_PW | docker login -u $DOCKERHUB_ID --password-stdin
    
    # BE/dev
    - |
      if [ "$CI_COMMIT_REF_NAME" == "BE/dev" ]; then
        docker push $IMAGE_NAME_DEV:$CI_COMMIT_SHA
        docker push $IMAGE_NAME_DEV:latest
      fi

    # BE/rel
    - |
      if [ "$CI_COMMIT_REF_NAME" == "BE/rel" ]; then
        docker push $IMAGE_NAME_REL:$CI_COMMIT_SHA
        docker push $IMAGE_NAME_REL:latest
      fi

  dependencies:
    - build_BE
  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_BRANCH == "BE/dev" || $CI_COMMIT_BRANCH == "BE/rel")
    when: always
  - when: never


#######################
# 3. cleanup JOB 단계  #
#######################

cleanup:
  stage: cleanup
  script:
    # 정리 (캐시고 뭐고... 지금 안 쓸랭 나중에... 하자...)
    - docker image prune -f
    - docker builder prune -f

  dependencies:
    - build_BE
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_BRANCH == "BE/dev" || $CI_COMMIT_BRANCH == "BE/rel")
      when: always
    - when: never


##################
# 4. deploy 단계   #
##################

deploy_BE_dev:
  stage: deploy
  variables:
    MYSQL_URL: "$MYSQL_URL_DEV"
    MYSQL_USERNAME: "$MYSQL_USERNAME_DEV"
    MYSQL_PASSWORD: "$MYSQL_PASSWORD_DEV"
    JPA_DDL_DEV: create
    JWT_SECRET: "$JWT_SECRET"
    REDIS_HOST_DEV: "$REDIS_HOST_DEV"
    REDIS_PORT_DEV: "$REDIS_PORT_DEV"

  script:
    #  디렉토리 이동
    - cd /home/ubuntu/
    # 환경 변수
    - rm .env
    - echo "MYSQL_URL=$MYSQL_URL" >> .env
    - echo "MYSQL_USERNAME=$MYSQL_USERNAME" >> .env
    - echo "MYSQL_PASSWORD=$MYSQL_PASSWORD" >> .env
    - echo "JPA_DDL_DEV=$JPA_DDL_DEV" >> .env
    - echo "REDIS_HOST=$REDIS_HOST_DEV" >> .env
    - echo "REDIS_PORT=$REDIS_PORT_DEV" >> .env

    # 컨테이너 on .env 참조
    - docker compose --env-file /home/ubuntu/.env up --build -d

  dependencies:
    - push_BE
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "BE/dev"
      when: always
    - when: never


deploy_BE_rel:
  stage: deploy
  variables:
    MYSQL_URL: "$MYSQL_URL_REL"
    MYSQL_USERNAME: "$MYSQL_USERNAME_REL"
    MYSQL_PASSWORD: "$MYSQL_PASSWORD_REL"
    JPA_DDL_DEV: validate
    JWT_SECRET: "$JWT_SECRET"

    MAIN_SERVER_URI: ubuntu@j12b210.p.ssafy.io
    PEM_KEY: /home/gitlab-runner/J12B210T.pem
  script:
    # 환경 변수
    - echo "MYSQL_URL=$MYSQL_URL" >> .env
    - echo "MYSQL_USERNAME=$MYSQL_USERNAME" >> .env
    - echo "MYSQL_PASSWORD=$MYSQL_PASSWORD" >> .env
    - echo "JPA_DDL_DEV=$JPA_DDL_DEV" >> .env
    - echo "JWT_SECRET=$JWT_SECRET" >> .env

    #.env 파일을 main-server로 전송
    - scp -i $PEM_KEY .env "$MAIN_SERVER_URI:/home/ubuntu/"

    # SSH를 통해 main-server에서 명령어 실행(터미널 생성)
    - |
      ssh -tt -i $PEM_KEY "$MAIN_SERVER_URI" << 'EOF'

        # 컨테이너 off
        docker compose down
        # 기존 이미지 제거
        docker rmi $(docker images -q)
        # 컨테이너 on .env 참조
        docker compose --env-file /home/ubuntu/.env up --build -d
        # 나가기
        exit
      EOF


  dependencies:
    - push_BE
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "BE/rel"
      when: always
    - when: never



